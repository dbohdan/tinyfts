#! /usr/bin/env tclsh
# Print text files in a directory as tinyfts JSON lines.
# ==============================================================================
# Copyright (c) 2022 D. Bohdan and contributors listed in AUTHORS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ==============================================================================

package require Tcl 8.6-10
package require fileutil 1
package require fileutil::magic::filetype 2
package require json::write
package require tdom

proc main {url-prefix dir args} {
    if {[llength $args] == 0} {
        set args *
    }

    json::write indented false

    set status 0
    cd $dir
    foreach file [fileutil::findByPattern . -glob -- {*}$args] {
        try {
            print-file-as-json ${url-prefix} $file
        } on error e {
            puts stderr [list $file $e]
            set status 1
        }
    }

    exit $status
}

proc print-file-as-json {url-prefix file} {
    set type [lindex [fileutil::magic::filetype $file] 1]
    if {[lindex $type 0] ne {text}} return

    set path [string range $file 2 end]
    set text [fileutil::cat $file]

    if {[lindex $type 1] eq {html}} {
        try {
            set doc [dom parse -html $text]
            set text [$doc asText]
            $doc delete
        } on error e {
            puts stderr [list $file {can't parse HTML; treating as text} $e]
        }
    }

    puts [json::write object \
        url [json::write string ${url-prefix}$path] \
        timestamp [file mtime $file] \
        title [json::write string $path] \
        content [json::write string $text] \
    ]
}

main {*}$argv
