#! /usr/bin/env tclsh
# Concatenate files with a comment containing the filename before each.
# ==============================================================================
# Copyright (c) 2019, 2021-2022 D. Bohdan and contributors listed in AUTHORS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ==============================================================================

package require Tcl 8.6-10
package require fileutil 1


proc padding {formatString value target char} {
    set len [string length [format $formatString $value {} {}]]

    set paddingLeft [string repeat = [expr {
        ($target - $len) / 2
    }]]
    set paddingRight [string repeat = [expr {
        $target - $len - [string length $paddingLeft]
    }]]

    return [list $paddingLeft $paddingRight]
}


proc titlecat args {
    set format {#%2$s file: %1$s%3$s}
    fconfigure stdout -translation binary

    foreach file $args {
        lassign [padding $format [list $file] 80 =] paddingLeft paddingRight
        foreach varName {paddingLeft paddingRight} {
            regsub ^. [set $varName] { } $varName
        }
        puts [format $format [list $file] $paddingLeft $paddingRight]

        puts -nonewline [fileutil::cat -translation binary -- $file]
    }
}


# If this is the main script...
if {[info exists argv0] && ([file tail [info script]] eq [file tail $argv0])} {
    titlecat {*}$argv
}
