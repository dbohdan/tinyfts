#! /usr/bin/env tclsh
# A tool to import data into a tinyfts database.
# ==============================================================================
# Copyright (c) 2019 D. Bohdan and contributors listed in AUTHORS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ==============================================================================


package require Tcl 8.6
package require http 2
package require sqlite3 3.9


namespace eval import {
    variable defaults {
        url-prefix https://wiki.tcl-lang.org/page/
        table tinyfts
    }
}


proc import::create-db {dest url-prefix table} {
    dest eval [format {
        CREATE VIRTUAL TABLE "%s" USING fts5(url, title, modified, content);
    } $table]

    dest function url [list apply {{prefix name} {
        set encoded [string range [http::formatQuery {} $name] 1 end]
        return -level 0 $prefix$encoded 
    }} ${url-prefix}]
}


proc import::wiki {srcPath destPath config} {
    sqlite3 src $srcPath -create false -readonly true
    sqlite3 dest $destPath

    create-db dest [dict get $config url-prefix] [dict get $config table]

    set query [format {
        SELECT pages.name, pages.date, pages_content.content
        FROM pages
        JOIN pages_content
        ON pages.%1$s = pages_content.%1$s
        WHERE pages_content.content <> ''
    } [expr {
        [dict get $config command] eq {wikit} ? {id} : {name}
    }]]

    dest transaction {
        src eval $query values {
            dest eval [format {
                INSERT INTO "%s"
                VALUES (
                    url(:values(name)),
                    :values(name),
                    :values(date),
                    :values(content)
                )
            } [dict get $config table]]
        }
    }
}


namespace eval import::cli {
    namespace path [namespace parent]
}


proc import::parse-options {command options} {
    variable defaults
    set config $defaults
    dict set config command $command

    dict for {flag v} $options {
        regsub ^--? $flag {} k
        if {$k ni $config} {
            error [list unknown option: $flag]
        }

        dict set config $k $v
    }

    return $config
}


proc import::nikit {src dest args} {
    wiki $src $dest [parse-options nikit $args]
}


proc import::wikit {src dest args} {
    wiki $src $dest [parse-options wikit $args]
}


namespace eval import {
    namespace export nikit wikit
    namespace ensemble create
}


# If this is the main script...
if {[info exists argv0] && ([file tail [info script]] eq [file tail $argv0])} {
    import {*}$argv
}