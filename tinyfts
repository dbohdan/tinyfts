#! /usr/bin/env tclsh
# tinyfts: a very small self-contained full text search HTTP server.
# ==============================================================================
# Copyright (c) 2019 D. Bohdan and contributors listed in AUTHORS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ==============================================================================

package require Tcl 8.6
package require fileutil 1
package require sqlite3 3.9


### Templates and configuration

# The CSS stylesheet is loaded from a file in [start].
set css {}

set config {
    file %REQUIRED%

    header {
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>%html([config title])</title>
            <link rel="stylesheet" type="text/css" href="/css">
        </head>
        <body>
    }

    footer {
        </body>
        </html>
    }

    title {
        tinyfts
    }

    subtitle {
        Full text search
    }

    table tinyfts

    minLength 2

    limit 100
}


proc config args {
    return [dict get $::config {*}$args]
}


### Controllers


proc error-reply {code message} {
    wapp-reply-code $code
    wapp-trim [config header]
    wapp-trim {<header>%html($message)</header>}
    wapp-trim [config footer]
}


proc wapp-default {} {
    wapp-trim [string cat [config header] {
        <header>
            <h1>%html([config title])</h1>
            <p>%html([config subtitle])</p>
        </header>
        <main>
            <form action="/search">
                <input type="text" name="query">
                <input type="submit" value="Search">
            </form>
        </main>
    } [config footer]]
}


proc wapp-page-css {} {
    wapp-mimetype text/css
    wapp $::css
}


proc wapp-page-search {} {
    wapp-allow-xorigin-params

    set startMatch %%%START_MATCH%%%
    set endMatch %%%END_MATCH%%%

    set highlightMatch {{startMatch endMatch text} {
        set re (.*?)${startMatch}(.*?)${endMatch}(.*?)

        set start 0
        while {[regexp -start $start \
                       -indices \
                       $re \
                       $text \
                       _ \
                       before matched after]} {
            wapp-trim {
                %html([string range $text {*}$before])
                <strong>%html([string range $text {*}$matched])</strong>
                %html([string range $text {*}$after])
            }

            set start [lindex $after 1]
        }

        if {$start == 0} {
            wapp-trim {%html($text)}
        }
    }}

    set query [wapp-param query {}]
    if {[string length [string trim $query]] < [config minLength]} {
        error-reply 400 "Query must be at least [config minLength]\
                         characters long."
        return
    }

    wapp-trim [config header]
    wapp-trim {
        <header><h1>Results for "%html($query)"</h1></header>
        <main>
        <ol>
    }

    db eval [format {
        SELECT
            url,
            title,
            modified,
            snippet("%1$s", 3, :startMatch, :endMatch, '...', 20) AS snippet
        FROM "%1$s"(:query)
        ORDER BY rank ASC
        LIMIT %2$u
    } [config table] [config limit]] values {
        wapp-trim {
            <li>
                <dl>
                    <dt>
                        <a href="%html%($values(url))%">
                            %html%($values(title))%
                        </a>
                    </dt>
                </dl>
                <dd>
        }
        apply $highlightMatch $startMatch $endMatch $values(snippet)
        wapp-trim </dd>\n</li>
    }

    wapp-trim </ol>\n</main>
    wapp-trim [config footer]
}


### CLI

proc usage me {
    set options {}
    dict for {k v} $::config {
        set line "--$k value"

        if {$v ne {%REQUIRED%}} {
            set line \[$line\]
        }

        lappend options $line
    }

    puts stderr "usage: $me [join $options { }] \[wapp-arg ...\]"
}


proc start {argv0 argv} {
    if {$argv in {/? -? -h -help --help}} {
        usage $argv0
        exit 0
    }

    try {
        cd [file dirname [info script]]
        uplevel 1 {source vendor/wapp/wapp.tcl}
        set ::css [fileutil::cat vendor/awsm.css/awsm.css]

        set wappArgs {}
        foreach {flag v} $argv {
            regsub ^--? $flag {} k

            if {[dict exists $::config $k]} {
                dict set ::config $k $v
            } else {
                lappend wappArgs $flag $v
            }
        }

        if {{%REQUIRED%} in [dict values $::config]} {
            usage $argv0
            exit 1
        }

        sqlite3 db [config file] -create false -readonly true
        wapp-start $wappArgs
    } on error {msg opts} {
        puts stderr "startup error: [dict get $opts -errorinfo]"
        usage $argv0
        exit 1
    }
}


# If this is the main script...
if {[info exists argv0] && ([file tail [info script]] eq [file tail $argv0])} {
    start $argv0 $argv
}
