#! /usr/bin/env tclsh
# Print text files in a directory as tinyfts JSON Lines. This program uses
# file(1) to determine what is a text file. It attempts to extract text from
# HTML using tDOM.
# ==============================================================================
# Copyright (c) 2022, 2024 D. Bohdan
# and contributors listed in AUTHORS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ==============================================================================

package require Tcl 8.6 9
package require fileutil 1
package require json::write 1
package require tdom

set batchSize 1000


proc main {url-prefix dir args} {
    if {[llength $args] == 0} {
        set args *
    }

    set status 0
    json::write indented false

    cd $dir
    set files [lsort [fileutil::findByPattern . -glob -- {*}$args]]
    set len [llength $files]

    for {set i 0} {$i < $len} {incr i $::batchSize} {
        # Do not use "--files-from -", since it doesn't seem able to handle
        # filenames with newlines. Run file(1) with batches of files to avoid
        # exceeding the maximum argument length. A possible multiuser privacy
        # concern: the filenames are visible in the process list.
        set output [exec file \
            --mime-type \
            --print0 \
            --print0 \
            {*}[lrange $files $i [expr {$i + $::batchSize - 1}]] \
        ]
        set types [split [string trimright $output \0] \0]

        dict for {file type} $types {
            try {
                print-file-as-json-lines ${url-prefix} $file $type
            } on error e {
                puts stderr [list $file $e]
                set status 1
            }
        }
    }

    exit $status
}


proc print-file-as-json-lines {url-prefix file type} {
    if {![string match text/* $type]} return

    set path [string range $file 2 end]
    set text [fileutil::cat $file]

    if {$type eq {text/html}} {
        try {
            # tDOM 0.9.2 can modify text passed to [dom parse -html]. This is
            # a violation of Tcl semantics. For example, "<HTML><HEA"
            # becomes "<html><hea" after a failed attempt to parse it.
            set copy [string range $text 0 end]
            set doc [dom parse -html $copy]
            set text [$doc asText]
            $doc delete
        } on error e {
            puts stderr [list $file {can't parse HTML; treating as text} $e]
        }
    }

    puts [json::write object \
        url [json::write string ${url-prefix}$path] \
        timestamp [file mtime $file] \
        title [json::write string $path] \
        content [json::write string $text] \
    ]
}


proc usage {} {
    puts stderr {usage: dir2jsonl url-prefix dir [glob-pattern ...]}
    puts stderr "\nConvert text files in dir to tinyfts JSON Lines and print\
        them to stdout. What is a text file is determined using file(1). The\
        names of the files must match at least one glob pattern if any glob\
        patterns are given."
}


# If this is the main script...
if {[info exists argv0] && ([file tail [info script]] eq [file tail $argv0])} {
    if {$argv in {{} -h -help --help -? /?}} {
        usage
        exit 0
    }
    main {*}$argv
}
